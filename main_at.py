import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
# import statsmodels as sm
import statsmodels.api as sm

# --------------------------------------------------
# Step 1: CSVからデータを読み込む
# --------------------------------------------------
# このCSVには、年別に「加入者数Q」「GDP」「価格P」「ダミー変数DD」などが含まれています
df = pd.read_csv("sample_demand_regression_data.csv")  # ここを実際のファイル名に変更

# ---------------------------------------------------
# Step 2: 対数を取る
# 自然対数（底=e=2.17の対数値）をとる→なぜか、はしっくりこない。魔法の数字e
#例：520の自然対数は6.5253829
# ---------------------------------------------------
# なぜ対数をとるのか？
# → 経済学では、変化率を扱いたいときに「対数の差」を使うのが一般的
# → 例：ln(Q2) - ln(Q1) ≒ (Q2 - Q1) / Q1（＝成長率）
# → 変化率で考えることで、単位の違うデータ（Q: 百万人, GDP: 兆円）でも比較できる


df["ln_Q"] = np.log(df["Q (millions)"])
df["ln_GDP"] = np.log(df["GDP (trillion yen)"])
print("以下がGDPの変化率の対数")
print(df["ln_GDP"])
df["ln_P"] = np.log(df["P (thousand yen)"])

# ---------------------------------------------------
# Step 3: 対数差分を取る（前年比成長率に相当）
#対数差分＝6.291569-6.327937
# ---------------------------------------------------ソースコード
# 例：Δln(Q) = ln(Q_t) - ln(Q_t-1) → Qの変化率（対前年）
df["Δln(Q)"] = df["ln_Q"].diff()
df["Δln(GDP)"] = df["ln_GDP"].diff()
print("以下がGDPの変化率の対数差分")
print(df["Δln(GDP)"])
df["Δln(P)"] = df["ln_P"].diff()

# 最初の年（1行目）は差分が取れないため除外
df = df.dropna().reset_index(drop=True)

# ---------------------------------------------------
# Step 4: 回帰分析（需要関数の係数を求める）
# ---------------------------------------------------
# 回帰モデル：Δln(Q) = α・Δln(GDP) + β・Δln(P) + γ・DD + 誤差
# → 各変数の「影響の大きさ」を求めることで、需要の構造がわかる

X = df[["Δln(GDP)", "Δln(P)", "DD"]]  # 説明変数（GDP変化率・価格変化率・ダミー）
print("以下が変化率の対数差分")
print(X)
X = sm.add_constant(X)  # 切片（定数項）を追加。GDPも価格も変化せず（変化率＝0）、DDも0（＝1994〜96年以外）だったときの「加入者数の伸び率」
print("以下が切片を追加した変化率の対数差分")
print(X)
y = df["Δln(Q)"]         # 被説明変数（Qの変化率）
print("以下がQの変化率")
print(y)

model = sm.OLS(y, X).fit()  # 最小二乗法で回帰を実行

# 回帰結果を表示（係数やP値など）
print("modelです",model.summary())

# ---------------------------------------------------
# Step 5: 係数をもとにレベルでの需要関数を復元
# ---------------------------------------------------
# ln(Q) = ln(A) + α・ln(GDP) + β・ln(P) + γ・DD
# → 対数を取っていた関係を戻して、Q = A・GDP^α・P^β・e^{γDD} にする
# → A（定数項）は過去のデータを使って逆算する

# 推定した係数（弾力性）を取り出す
alpha = model.params["Δln(GDP)"]  # 所得弾力性
print("alpha",alpha)
beta = model.params["Δln(P)"]     # 価格弾力性
print("beta",beta)
gamma = model.params["DD"]        # ダミー変数の効果
print("gamma",gamma)

# 各年ごとにA_t = Q / (GDP^α * P^β * exp(γDD)) を計算
# ある年 t の加入者数（Q）は、GDP や価格（P）、政策（DD）などの要素によって決まっている。そのとき、それらの影響以外の「定数部分」が Aₜ です。
#「GDP、価格、政策の影響を除いた上で、その年の純粋な需要水準（Aₜ）を見よう」ということです。
df["A_t"] = df["Q (millions)"] / (
    df["GDP (trillion yen)"] ** alpha *
    df["P (thousand yen)"] ** beta *
    np.exp(gamma * df["DD"])
)
print("A_t",df["A_t"])

# 代表値（A）の平均を取る
#この Aₜ（エー・ティー）は、「その年 t の需要水準（定数項）」です。
#  目的は「代表的な需要関数」を作ること
# 「過去にこんな変化があった」「この年は特別に需要が多かった」みたいな年ごとのブレを無視して、
# “一般的な年”において、加入者数（Q）は GDP、価格（P）、政策（DD）によってどう決まるのか？
# という 「代表的な需要関数」 を作りたい。ため、代表値の平均をとる。
# 「A = 全体としての代表値」として固定値にすることで需要関数の形にできる
A_mean = df["A_t"].mean()
print(f"\n推定された定数項 A の平均値: {A_mean:.4f}")

# ---------------------------------------------------
# Step 6: 需要関数を表示
# ---------------------------------------------------
# 最終的な推定結果：Q = A * GDP^α * P^β * e^{γDD}
print("\n推定された需要関数:")
print(f"Q = {A_mean:.4f} * GDP^{alpha:.4f} * P^{beta:.4f} * e^({gamma:.4f} * DD)")

# ---------------------------------------------------
# Step 7: A_t（定数項）の推移をグラフで確認
# ---------------------------------------------------
plt.figure(figsize=(10, 5))
plt.plot(df["Year"], df["A_t"], marker='o')
plt.title("各年の定数項 A_t の推移")
plt.xlabel("Year")
plt.ylabel("A_t")
#年ごとに、経済成長・価格変化・DDの影響を除いて、どれだけ自然に加入者数が伸びていたか（基礎的な伸び率）
#これが
plt.grid(True)
plt.show()
